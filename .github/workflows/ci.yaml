name: CI

on:
  workflow_call:
    inputs:
      environment:
        type: string
        description: "Environment to deploy to"
        required: true
      aws_account:
        type: string
        description: "AWS account to deploy to"
        required: true
      aws_region:
        type: string
        description: "AWS region to deploy to"
        required: true
      aws_assume_role:
        type: string
        description: "AWS role to assume"
        required: true
      resource_prefix:
        type: string
        description: "resource_prefix for AWS resource name"
        required: true
      service_name:
        type: string
        description: "service name"
        required: true
      eks_cluster_name:
        type: string
        description: "EKS cluster name"
        required: true

env:
  AWS_ACCOUNT: ${{ inputs.aws_account }}
  AWS_REGION: ${{ inputs.aws_region }}
  AWS_ROLE_ARN: arn:aws:iam::${{ inputs.aws_account }}:role/${{ inputs.aws_assume_role }}
  RESOURCE_PREFIX: ${{ inputs.resource_prefix }}
  SERVICE_NAME: ${{ inputs.service_name }}
  EKS_CLUSTER_NAME: ${{ inputs.eks_cluster_name }}
  REPOSITORY_ID: ${{ inputs.aws_account }}.dkr.ecr.${{ inputs.aws_region }}.amazonaws.com/${{ inputs.resource_prefix }}-ecr

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    steps:
      - uses: actions/checkout@v4

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Configure AWS CLI
        run: |
          aws configure set region ${{ env.AWS_REGION }}

      - name: Assume IAM Role
        id: assume-role
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr-login
        uses: aws-actions/amazon-ecr-login@v1
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Docker metadata
        id: docker-metadata
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REPOSITORY_ID }}
          tags: |
            type=sha,format=short,enable=true
            type=raw,value=latest,suffix=-${{ github.sha }},enable=true

      - name: Build image
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          pull: true
          tags: ${{ steps.docker-metadata.outputs.tags }}
          platforms: linux/x86_64

      - name: Fullfill service image
        run: |
          echo service_weather_image_tag=\"latest-${{ github.sha }}\" >> ./iac/tfvars/${{ inputs.environment }}.tfvars
          cat ./iac/tfvars/${{ inputs.environment }}.tfvars

      - name: Install Terragrunt
        run: |
          export ARCH="amd64"
          cd ./iac/scripts && chmod +x install_terragrunt.sh && ./install_terragrunt.sh $ARCH
          terragrunt --version

      - name: Terragrunt plan on ${{ inputs.environment }} environment
        working-directory: ./iac/${{ inputs.environment }}
        run: |
          terragrunt init && terragrunt plan
