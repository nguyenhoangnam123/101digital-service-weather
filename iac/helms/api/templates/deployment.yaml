---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.deployment.service_account }}
---
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: {{ .Values.global.service_name }}-secrets-manager
spec:
  provider:
    aws:
      service: SecretsManager
      region: {{ .Values.global.aws_region }}
      auth:
        jwt:
          serviceAccountRef:
            name: {{ .Values.deployment.service_account }}
      # role: arn:aws:iam::{{ .Values.deployment.aws_account }}:role/{{ .Values.deployment.service_account }}
---
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: {{ .Values.global.service_name }}-external-secret
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: {{ .Values.global.service_name }}-secrets-manager
    kind: SecretStore
  target:
    name: {{ .Values.global.service_name }}-api-secrets # K8s secret which should be created
    creationPolicy: Owner
  # Data defines the connection between the Kubernetes Secret keys and the Provider data
  data: # data key/value pair build for  K8s secret above
  - secretKey: {{ .Values.global.open_weather_api_key }} # data entry key
    remoteRef:
      key: {{ .Values.global.resource_prefix }}-api-secrets # AWS Secret
      property: {{ .Values.global.open_weather_api_key }} # value for data entry key, ref from remoteRef above
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.global.service_name }}
  labels:
    app.kubernetes.io/name: {{ .Values.global.service_name }}
spec:
  replicas: 3
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Values.global.service_name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ .Values.global.service_name }}
    spec:
      serviceAccountName: {{ .Values.deployment.service_account }}
      affinity:
        {{- with .Values.deployment.affinity }}
        {{- toYaml . | nindent 8 }}
        {{- end }}        
      topologySpreadConstraints:
        - maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: DoNotSchedule
          labelSelector:
            matchLabels:
              app.kubernetes.io/name: {{ .Values.global.service_name }}
          nodeAffinityPolicy: Honor
          nodeTaintsPolicy: Honor
      containers:
        - name: {{ .Values.global.service_name }}
          {{- with (index .Values.deployment.containers 0) }}
          image: {{ .image }}
          {{- end }}
          command: ["poetry"]
          args:
            [
              "run",
              "uvicorn",
              "src.app:app",
              "--host",
              "0.0.0.0",
              "--port",
              "8080",
            ]
          ports:
            - containerPort: 8080
              name: http
          env:
            - name: OPEN_WEATHER_API_KEY
              valueFrom:
                secretKeyRef:
                    name: {{ .Values.global.service_name }}-api-secrets
                    key: {{ .Values.global.open_weather_api_key }}         
            {{- with (index .Values.deployment.containers 0) }}
            {{- toYaml .extraEnvs | nindent 12 }}
            {{- end }}
          resources:
            {{- toYaml .Values.deployment.resources | nindent 12 }}
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 30
            periodSeconds: 10
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 5
            periodSeconds: 5
